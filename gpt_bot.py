import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
openai.api_key = "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"
BOT_TOKEN = "7916414460:AAETN_SRzcIcrAJz2TFFpKrCd9l--Fofd8Q"

class SimpleBot:
    def __init__(self):
        self.user_sessions = {}
    
    async def start(self, update: Update, context: CallbackContext) -> None:
        user = update.effective_user
        user_id = user.id
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
        
        text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–Ø AI-–±–æ—Ç. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å!"
        
        keyboard = [
            [InlineKeyboardButton("üß† –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="start_chat")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear")],
        ]
        
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    async def button_handler(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data == "clear":
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
            await query.edit_message_text("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
        
        elif data == "start_chat":
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []
            await query.edit_message_text("üí¨ –î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = [{"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            for msg in self.user_sessions[user_id][-6:]:
                messages.append(msg)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({"role": "user", "content": user_message})
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = openai.ChatCompletion.create(
                model="gpt-4.1-mini",
                messages=messages,
                max_tokens=1000
            )
            
            bot_response = response.choices[0].message.content.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.user_sessions[user_id].extend([
                {"role": "user", "content": user_message},
                {"role": "assistant", "content": bot_response}
            ])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.user_sessions[user_id]) > 10:
                self.user_sessions[user_id] = self.user_sessions[user_id][-10:]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(f"ü§ñ {bot_response}")
            
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    bot = SimpleBot()
    
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CallbackQueryHandler(bot.button_handler))
    app.add_handler(MessageHandler(filters.TEXT, bot.handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()