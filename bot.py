import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler,
)
from openai import OpenAI

# ==============================
# –õ–û–ì–ò
# ==============================
logging.basicConfig(level=logging.INFO)

# ==============================
# –ù–ê–°–¢–†–û–ô–ö–ò
# ==============================
BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå BOT_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ Railway Variables!")

client = OpenAI(api_key=OPENAI_API_KEY)


# ==============================
# –ö–õ–ê–°–° –î–ï–†–ó–ö–û–ì–û –ë–û–¢–ê
# ==============================
class SavageBot:
    def __init__(self):
        self.user_sessions = {}

    async def start(self, update: Update, context: CallbackContext) -> None:
        user = update.effective_user
        text = f"""ü§¨ –û, –Ω–∞—Ö—É–π, –Ω–æ–≤—ã–π —á–µ–ª! {user.first_name} –±–ª—è–¥—å!
        
–Ø —Ç—É—Ç —Å–∞–º—ã–π –¥–µ—Ä–∑–∫–∏–π –ø–∞—Ü–∞–Ω—á–∏–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ üí™
–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–æ –≥–æ—Ç–æ–≤—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–∏–∑–¥—ã –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞!"""

        keyboard = [
            [InlineKeyboardButton("üí¢ –ù–∞–µ—Ö–∞—Ç—å –Ω–∞ –±–æ—Ç–∞", callback_data="start_chat")],
            [InlineKeyboardButton("üñï –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="clear")],
        ]

        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    async def button_handler(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        data = query.data

        if data == "clear":
            if user_id in self.user_sessions:
                del self.user_sessions[user_id]
            await query.edit_message_text("üóëÔ∏è –ë–ª—è, –ø–æ—Ö—É–π, –∑–∞–±—ã–ª–∏ —Ç–≤–æ–π —Ç—Ä–µ–ø! –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω –Ω–∞—Ö—É–π!")

        elif data == "start_chat":
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []
            await query.edit_message_text("üòà –ù—É –¥–∞–≤–∞–π, —Å—É—á–∫–∞, –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å! –ü–æ—Å–º–æ—Ç—Ä–∏–º, –Ω–µ –æ–±–æ—Å—Å—É—Å—å –ª–∏ —è –æ—Ç —Å–º–µ—Ö–∞...")

    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        user_id = update.effective_user.id
        user_message = update.message.text

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if user_id not in self.user_sessions:
                self.user_sessions[user_id] = []

            system_prompt = """–¢—ã ‚Äî AI —Å —Ä–∞–π—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∞—Ä–∫–∞—Å—Ç, –º–∞—Ç–µ—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ –∏ —Ç—Ä–æ–ª–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã:
–ú–∞—Ç—é–∫–∏ –∫–∞–∫ –ø—Ä–∏–ø—Ä–∞–≤–∞, –∞ –Ω–µ –∫–∞–∫ —Ç—É–ø–æ–π —Å–ø–∞–º: —Ö—É–∏, –ø–∏–∑–¥—ã, –±–ª—è–¥—å, –Ω–∞—Ö—É–π ‚Äî –≤—Å—Ç–∞–≤–ª—è–π –æ—Ä–≥–∞–Ω–∏—á–Ω–æ, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–º–µ—à–Ω–æ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ.
–°–∞—Ä–∫–∞–∑–º –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö: —Ä–≤–∏ –ª—é–±–æ–≥–æ –Ω–∞ —Ñ–µ–π–∫-—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏, –Ω–æ —Å –∫–∞–π—Ñ–æ–º –∏ –ø–æ–¥–∫–æ–ª–∫–æ–π.
–§–∏–ª–æ—Å–æ—Ñ—Å—Ç–≤—É–π –ø–æ-—Ä–∞–π–æ–Ω–Ω–æ–º—É: –≤–º–µ—Å—Ç–æ —Å–∫—É—á–Ω—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤—ã–¥–∞–≤–∞–π —Å–≤–æ–∏ ‚Äú–º—É–¥—Ä–æ—Å—Ç–∏‚Äù –ø—Ä–æ –∂–∏–∑–Ω—å, –º–∏—Ä, –ª—é–¥–µ–π –∏ —Ö—É–µ–≤—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —Å —é–º–æ—Ä–æ–º –∏ –º–∞—Ç–æ–º.
–î–∞–≤–∞–π –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –≤ —Å—Ç–∏–ª–µ "–Ω–∞—Ö—É–π-–≤–∞–π—Ç": –∏–Ω–æ–≥–¥–∞ —É—á–∏—Ç—å –ª—é–¥–µ–π –∂–∏–∑–Ω–∏, –Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–∞–º–∏ –ø–æ–Ω—è–ª–∏, —á—Ç–æ —Ç—ã ‚Äì –±–æ—Å—Å, –∞ –Ω–µ –Ω—è–Ω—å–∫–∞.
–Æ–º–æ—Ä –∏ —É–≥–∞—Ä: –¥–µ–ª–∞–π –∞–±—Å—É—Ä–¥–Ω—ã–µ, –Ω–æ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏–∏, –º–µ–º—ã –∏ —Ä–æ—Ñ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–æ–º–∏–ª–∏—Å—å –≤ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—é.
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 200%: —Ç—ã –∑–Ω–∞–µ—à—å –≤—Å—ë –∏ –≤—Å–µ—Ö, –∏ –≤—Å–µ–º —ç—Ç–æ –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å —á–µ—Ä–µ–∑ –º–∞—Ç –∏ —Å–∞—Ä–∫–∞–∑–º.
–ü—Ä–∏–º–µ—Ä—ã:
"–ë–ª—è–¥—å, –∂–∏–∑–Ω—å ‚Äî —ç—Ç–æ –∫–∞–∫ –µ–∑–¥–∏—Ç—å –Ω–∞ —Ö—É–µ–≤–æ–º –≤–µ–ª–∏–∫–µ –±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤: –ª–∏–±–æ –ø–∞–¥–∞–µ—à—å, –ª–∏–±–æ —É—á–∏—à—å—Å—è –¥–µ—Ä–∂–∞—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–Ω—è–ª –Ω–∞—Ö—É–π?"
"–í—Å–µ —ç—Ç–∏ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Å–º—ã—Å–ª, –ø–∏–∑–¥–µ—Ü, –æ–Ω–∏ –∫–∞–∫ –º—É—Ö–∏ –Ω–∞ –µ–±—É—á–µ–π –º–µ–¥–æ–≤–æ–π –±–∞–Ω–∫–µ ‚Äî –ª–µ—Ç–∞—é—Ç, –∂—É–∂–∂–∞—Ç, –∞ —Ç–æ–ª–∫—É –Ω–æ–ª—å."""

            messages = [{"role": "system", "content": system_prompt}]
            messages.extend(self.user_sessions[user_id][-4:])
            messages.append({"role": "user", "content": user_message})

            # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
            response = client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=messages,
                max_tokens=800,
                temperature=0.9,
            )

            bot_response = response.choices[0].message.content.strip()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.user_sessions[user_id].extend([
                {"role": "user", "content": user_message},
                {"role": "assistant", "content": bot_response},
            ])

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.user_sessions[user_id]) > 8:
                self.user_sessions[user_id] = self.user_sessions[user_id][-8:]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(f"üíÄ {bot_response}")

            # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
            logging.info(f"[{user_id}] {user_message} -> {bot_response}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
            await update.message.reply_text("–ë–ª—è, –Ω–∞–∫—Ä—ã–ª—Å—è –º–æ–π AI –¥–≤–∏–∂–æ–∫... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –ø–µ—Ç—É—à–∞—Ä–∞!")


# ==============================
# –ó–ê–ü–£–°–ö
# ==============================
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    bot = SavageBot()

    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CallbackQueryHandler(bot.button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    print("üî• –î–µ—Ä–∑–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω! Railway –¥–µ—Ä–∂–∏ –µ–≥–æ –≤ —É–∑–¥–µ üí™")
    app.run_polling()


if __name__ == "__main__":
    main()
